class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        Set<List<Integer>> res=new HashSet<>();
        
        dfs(0, nums, new ArrayList<>(), res);
        
        List<List<Integer>> ans=new ArrayList<>();
        for(List<Integer> i: res){
            ans.add(new ArrayList<>(i));
        }
        
        return ans;
    }
    public void dfs(int curr, int[] nums, List<Integer> list, Set<List<Integer>> res){
        if(curr >= nums.length){
            if(list.size() > 1) res.add(new ArrayList<>(list));
            return;
        }
        
        //now since we want every single element to have the
        //chance of becoming the first element
        dfs(curr + 1, nums, list, res);
        
        if(list.size() == 0 || list.get(list.size() - 1) <= nums[curr]){
            list.add(nums[curr]);
            dfs(curr + 1, nums, list, res);
            list.remove(list.size() - 1);
        }
    }
