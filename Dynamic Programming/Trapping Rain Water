class Solution {

public int trap(int[] height) {
    
    int sum = 0;
    int n = height.length;
    int[] leftMax=new int[n];
    int[] rightMax=new int[n];
    leftMax[0] = height[0];             //Left-most and right-most bar won't trap water as it'll spill right out, so just store value of height
    rightMax[n-1] = height[n-1];

    for (int i=1; i<n; i++)             //Find the max height from the left-most bar
        leftMax[i] = Math.max(height[i], leftMax[i-1]);
    
    for (int i=n-2; i>=0; i--)          //Find the max height from the right-most bar
        rightMax[i] = Math.max(height[i], rightMax[i+1]);
    
    for (int i=1; i<n-1; i++)           //Find the min of leftMax and rightMax
        sum = sum + Math.min(leftMax[i], rightMax[i]) - height[i];
    
    return sum;
}
}

/* Alternative
